---
import { Icon } from 'astro-icon/components';

import Image from '~/components/common/Image.astro';
import PostTags from '~/components/blog/Tags.astro';
import SocialShare from '~/components/common/SocialShare.astro';
import AuthorCard from '~/components/blog/AuthorCard.astro';

import { getPermalink } from '~/utils/permalinks';
import { getFormattedDate } from '~/utils/utils';

import type { Post } from '~/types';

export interface Props {
  post: Post;
  url: string | URL;
}

const { post, url } = Astro.props;
---

<section class="py-4 sm:py-8 lg:py-10 mx-auto">
  <article>
    <header class={post.image ? '' : ''}>
      {
        post.image ? (
          <Image
            src={post.image}
            class="max-w-full lg:max-w-[900px] mx-auto mb-6 sm:rounded-md bg-gray-400 dark:bg-slate-700"
            widths={[400, 900]}
            sizes="(max-width: 900px) 400px, 900px"
            alt={post?.excerpt || ''}
            width={900}
            height={506}
            loading="eager"
            decoding="async"
          />
        ) : (
          <div class="max-w-3xl mx-auto px-4 sm:px-6">
            <div class="border-t dark:border-slate-700" />
          </div>
        )
      }
      <h1
        class="px-4 sm:px-6 max-w-4xl mx-auto text-3xl md:text-4xl font-bold leading-tighter tracking-tighter font-heading text-center"
      >
        {post.title}
      </h1>
      {
        post.excerpt && (
          <div class=" max-w-3xl mx-auto relative my-4 p-4 rounded-lg bg-gray-50 dark:bg-slate-800 border-l-4 border-primary dark:border-blue-600">
            <p class="flex-grow text-muted dark:text-slate-400 text-lg italic">{post.excerpt}</p>
            <Icon name="tabler:quote" class="absolute top-2 right-2 w-6 h-6 text-gray-200 dark:text-slate-700" />
          </div>
        )
      }
      <div class="mb-1 flex justify-center">
        <span class="text-sm text-center">
          {
            post.author && (
              <>
                {' '}
                <Icon name="tabler:user" class="w-4 h-4 inline-block -mt-0.5 dark:text-gray-400" />
                <span class="inline-block">{typeof post.author === 'string' ? post.author : post.author.name}</span>
                {'·'}
              </>
            )
          }
          <Icon name="tabler:clock" class="w-4 h-4 inline-block -mt-0.5 dark:text-gray-400" />
          <time datetime={String(post.publishDate)} class="inline-block">{getFormattedDate(post.publishDate)}</time>

          {
            post.category && (
              <>
                {' '}
                ·{' '}
                <a class="hover:underline inline-block" href={getPermalink(post.category.slug, 'category')}>
                  {post.category.title}
                </a>
              </>
            )
          }
          {
            post.readingTime && (
              <>
                &nbsp;· <span>{post.readingTime}</span> min read
              </>
            )
          }
        </span>
      </div>

      {
        post.author && typeof post.author === 'object' && (
          <div class="max-w-3xl mx-auto px-4 sm:px-6 mb-8 flex justify-end">
            <AuthorCard author={post.author} />
          </div>
        )
      }
    </header>
    <div
      class="mx-auto px-6 sm:px-6 max-w-4xl prose prose-md lg:prose-lg dark:prose-invert dark:prose-headings:text-slate-300 prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-primary dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg mt-8 prose-headings:scroll-mt-[80px] prose-li:my-0
      prose-code:text-blue-600 dark:prose-code:text-blue-400
      prose-pre:bg-gray-50 dark:prose-pre:bg-slate-800/60
      prose-blockquote:border-l-primary dark:prose-blockquote:border-l-blue-500
      prose-h2:border-b prose-h2:border-gray-200 dark:prose-h2:border-gray-700 prose-h2:pb-1 prose-h2:text-2xl lg:prose-h2:text-3xl
      prose-h3:text-xl lg:prose-h3:text-2xl
      prose-p:text-gray-700 dark:prose-p:text-gray-300
      prose-li:marker:text-primary dark:prose-li:marker:text-blue-500"
    >
      <slot />
    </div>

    <!-- Table of contents for larger screens, only shows on articles with headings -->
    <div
      class="hidden lg:block fixed top-32 right-6 w-56 p-3 bg-white dark:bg-slate-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-800 max-h-[calc(100vh-180px)] overflow-y-auto toc-container"
    >
      <div class="flex justify-between items-center mb-3">
        <h4 class="text-sm font-semibold text-gray-900 dark:text-white">Table of Contents</h4>
        <button
          class="toc-close-btn p-1 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
        >
          <span class="sr-only">Close table of contents</span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg
          >
        </button>
      </div>
      <div class="toc-content text-xs"></div>
    </div>

    <!-- Button to reopen TOC when closed -->
    <button
      class="hidden lg:hidden fixed top-32 right-6 p-2 bg-white dark:bg-slate-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-800 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors toc-reopen-btn"
      aria-label="Show table of contents"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        ><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line
          x1="3"
          y1="18"
          x2="21"
          y2="18"></line></svg
      >
    </button>

    <script>
      // Function to handle mobile visibility
      function handleMobileVisibility() {
        const tocContainer = document.querySelector('.toc-container');
        const reopenButton = document.querySelector('.toc-reopen-btn');

        if (window.innerWidth < 600) {
          if (tocContainer) tocContainer.style.display = 'none';
          if (reopenButton) reopenButton.style.display = 'none';
        } else {
          // Only show if there are enough headings
          const headings = document.querySelectorAll('article h2, article h3, article h4');
          if (headings.length >= 3) {
            const tocClosed = localStorage.getItem('tocClosed') === 'true';
            if (tocContainer) tocContainer.style.display = tocClosed ? 'none' : 'block';
            if (reopenButton) reopenButton.style.display = tocClosed ? 'block' : 'none';
          }
        }
      }

      // Function to generate table of contents
      function generateTableOfContents() {
        const article = document.querySelector('article');
        const tocContent = document.querySelector('.toc-content');
        const tocContainer = document.querySelector('.toc-container');

        if (!article || !tocContent || !tocContainer) return;

        // Clear existing content to prevent duplication
        tocContent.innerHTML = '';

        const headings = Array.from(article.querySelectorAll('h2, h3, h4')).filter((heading) => {
          return heading.textContent.trim() === 'Table of Contents' ? false : true;
        });

        const reopenButton = document.querySelector('.toc-reopen-btn');

        // Hide both TOC and reopen button if not enough headings
        if (headings.length < 3) {
          tocContainer.style.display = 'none';
          if (reopenButton) reopenButton.style.display = 'none';
          return;
        } else {
          // Otherwise, check the user's preference
          const tocClosed = localStorage.getItem('tocClosed') === 'true';

          if (tocClosed) {
            tocContainer.style.display = 'none';
            if (reopenButton) reopenButton.style.display = 'block';
          } else {
            tocContainer.style.display = 'block';
            if (reopenButton) reopenButton.style.display = 'none';
          }
        }

        const toc = document.createElement('ul');
        toc.className = 'space-y-0.5';

        headings.forEach((heading) => {
          const headingId = heading.id || heading.textContent.toLowerCase().replace(/[^a-z0-9]+/g, '-');
          heading.id = headingId;

          const li = document.createElement('li');
          const a = document.createElement('a');
          a.href = `#${headingId}`;
          a.textContent = heading.textContent;
          a.className = 'hover:text-primary dark:hover:text-blue-400 transition-colors';

          // Indent based on heading level
          if (heading.tagName === 'H3') {
            a.className += ' ml-2';
          } else if (heading.tagName === 'H4') {
            a.className += ' ml-4';
          }

          li.appendChild(a);
          toc.appendChild(li);
        });

        tocContent.appendChild(toc);

        // Set up scroll listener
        const scrollListener = function () {
          const articleEnd = article.offsetTop + article.offsetHeight;
          const windowBottom = window.scrollY + window.innerHeight;

          if (windowBottom >= articleEnd) {
            tocContainer.style.opacity = '0';
            tocContainer.style.pointerEvents = 'none';
          } else {
            tocContainer.style.opacity = '1';
            tocContainer.style.pointerEvents = 'auto';
          }
        };

        // Remove existing listener before adding to prevent duplicates
        window.removeEventListener('scroll', scrollListener);
        window.addEventListener('scroll', scrollListener);
      }

      // Function to add copy buttons to code blocks
      function addCopyButtonsToCodeBlocks() {
        const codeBlocks = document.querySelectorAll('pre:not(.command-line)');

        codeBlocks.forEach((codeBlock) => {
          // Skip if button already exists
          if (codeBlock.querySelector('button')) return;

          const copyButton = document.createElement('button');
          copyButton.className =
            'absolute top-2 right-2 p-1 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:bg-gray-700';
          copyButton.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>';
          copyButton.ariaLabel = 'Copy code to clipboard';

          copyButton.addEventListener('click', () => {
            const code = codeBlock.querySelector('code').innerText;
            navigator.clipboard.writeText(code);

            // Visual feedback
            copyButton.innerHTML =
              '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
            copyButton.classList.add('text-green-500');

            setTimeout(() => {
              copyButton.innerHTML =
                '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>';
              copyButton.classList.remove('text-green-500');
            }, 2000);
          });

          // Make code block relative for absolute positioning of the button
          codeBlock.style.position = 'relative';
          codeBlock.appendChild(copyButton);
        });
      }

      // Initialize on DOMContentLoaded (initial page load)
      document.addEventListener('DOMContentLoaded', function () {
        generateTableOfContents();
        addCopyButtonsToCodeBlocks();
        setupTocToggleButtons();
        handleMobileVisibility();
      });

      // Function to handle the TOC toggle buttons
      function setupTocToggleButtons() {
        const tocContainer = document.querySelector('.toc-container');
        const closeButton = document.querySelector('.toc-close-btn');
        const reopenButton = document.querySelector('.toc-reopen-btn');

        if (!tocContainer || !closeButton || !reopenButton) return;

        function closeToc() {
          tocContainer.style.display = 'none';
          reopenButton.style.display = 'block';
          // Store the user preference in localStorage
          localStorage.setItem('tocClosed', 'true');
        }

        function openToc() {
          tocContainer.style.display = 'block';
          reopenButton.style.display = 'none';
          // Update the user preference in localStorage
          localStorage.setItem('tocClosed', 'false');
        }

        // Close button event listener
        closeButton.addEventListener('click', closeToc);

        // Reopen button event listener
        reopenButton.addEventListener('click', openToc);

        // Initialize based on stored preference
        if (localStorage.getItem('tocClosed') === 'true') {
          closeToc();
        } else {
          openToc();
        }
      }

      // Handle Astro view transitions
      document.addEventListener('astro:page-load', function () {
        generateTableOfContents();
        addCopyButtonsToCodeBlocks();
        setupTocToggleButtons();
        handleMobileVisibility();
      });

      // Add resize listener
      window.addEventListener('resize', handleMobileVisibility);
    </script>
    <div class="mx-auto px-6 sm:px-6 max-w-3xl mt-8 flex justify-between flex-col sm:flex-row">
      <PostTags tags={post.tags} class="mr-5 rtl:mr-0 rtl:ml-5" />
      <SocialShare url={url} text={post.title} class="mt-5 sm:mt-1 align-middle text-gray-500 dark:text-slate-600" />
    </div>
  </article>
</section>
